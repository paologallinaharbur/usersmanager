// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "user manager",
    "version": "1.0.0"
  },
  "basePath": "/api",
  "paths": {
    "/healthcheck": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "healthcheck"
        ],
        "summary": "Answering 200 if everything looks good",
        "operationId": "healthcheck",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/message"
            }
          }
        }
      }
    },
    "/user": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "User"
        ],
        "summary": "Add a new user. If the user already exists the query will fail",
        "operationId": "createUser",
        "parameters": [
          {
            "name": "userData",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/userData"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/nickName"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/user/filter": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "User"
        ],
        "summary": "Get a list of user respecting the filter. You can use one or more filters to narrow your queries, all filters will be added with an AND",
        "operationId": "getUser",
        "parameters": [
          {
            "name": "userDataFilter",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/userDataFilter"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userDataList"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/user/{nickName}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "User"
        ],
        "summary": "Update an already created User. If the user does not exist the query will fail",
        "operationId": "updateUser",
        "parameters": [
          {
            "type": "string",
            "description": "nickName that uniquely identify an User",
            "name": "nickName",
            "in": "path",
            "required": true
          },
          {
            "name": "userData",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/userData"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/nickName"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "User"
        ],
        "summary": "Delete an already created User. If the user does not exist the query will fail",
        "operationId": "deleteUser",
        "parameters": [
          {
            "type": "string",
            "description": "NickName that uniquely identify an User",
            "name": "nickName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "203": {
            "description": "Deleted"
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "fields": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "message": {
      "description": "This is the message returned by the healthcheck",
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "nickName": {
      "type": "string"
    },
    "userData": {
      "type": "object",
      "required": [
        "nickName"
      ],
      "properties": {
        "country": {
          "description": "country",
          "type": "string",
          "example": "Italy"
        },
        "email": {
          "description": "email",
          "type": "string",
          "example": "paologallina@gmail.com"
        },
        "firstName": {
          "description": "firstName",
          "type": "string",
          "example": "paolo"
        },
        "nickName": {
          "description": "nickName",
          "type": "string",
          "example": "gallocedrone"
        },
        "password": {
          "description": "password",
          "type": "string",
          "example": "supersecurepassword"
        },
        "secondName": {
          "description": "secondName",
          "type": "string",
          "example": "gallina"
        }
      }
    },
    "userDataFilter": {
      "description": "The porpouse of this object is to pass filtering data to the query",
      "type": "object",
      "properties": {
        "exclude": {
          "description": "include elements with these values",
          "$ref": "#/definitions/userDataNoPassword"
        },
        "include": {
          "description": "exclude elements with these values",
          "$ref": "#/definitions/userDataNoPassword"
        }
      }
    },
    "userDataList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/userDataNoPassword"
      }
    },
    "userDataNoPassword": {
      "description": "This object is a copy of userData without the password",
      "type": "object",
      "properties": {
        "country": {
          "description": "country",
          "type": "string",
          "example": "Italy"
        },
        "email": {
          "description": "email",
          "type": "string",
          "example": "paologallina@gmail.com"
        },
        "firstName": {
          "description": "firstName",
          "type": "string",
          "example": "paolo"
        },
        "nickName": {
          "description": "nickName",
          "type": "string",
          "example": "gallocedrone"
        },
        "secondName": {
          "description": "secondName",
          "type": "string",
          "example": "gallina"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "user manager",
    "version": "1.0.0"
  },
  "basePath": "/api",
  "paths": {
    "/healthcheck": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "healthcheck"
        ],
        "summary": "Answering 200 if everything looks good",
        "operationId": "healthcheck",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/message"
            }
          }
        }
      }
    },
    "/user": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "User"
        ],
        "summary": "Add a new user. If the user already exists the query will fail",
        "operationId": "createUser",
        "parameters": [
          {
            "name": "userData",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/userData"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/nickName"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/user/filter": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "User"
        ],
        "summary": "Get a list of user respecting the filter. You can use one or more filters to narrow your queries, all filters will be added with an AND",
        "operationId": "getUser",
        "parameters": [
          {
            "name": "userDataFilter",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/userDataFilter"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userDataList"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/user/{nickName}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "User"
        ],
        "summary": "Update an already created User. If the user does not exist the query will fail",
        "operationId": "updateUser",
        "parameters": [
          {
            "type": "string",
            "description": "nickName that uniquely identify an User",
            "name": "nickName",
            "in": "path",
            "required": true
          },
          {
            "name": "userData",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/userData"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/nickName"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "User"
        ],
        "summary": "Delete an already created User. If the user does not exist the query will fail",
        "operationId": "deleteUser",
        "parameters": [
          {
            "type": "string",
            "description": "NickName that uniquely identify an User",
            "name": "nickName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "203": {
            "description": "Deleted"
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "fields": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "message": {
      "description": "This is the message returned by the healthcheck",
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "nickName": {
      "type": "string"
    },
    "userData": {
      "type": "object",
      "required": [
        "nickName"
      ],
      "properties": {
        "country": {
          "description": "country",
          "type": "string",
          "example": "Italy"
        },
        "email": {
          "description": "email",
          "type": "string",
          "example": "paologallina@gmail.com"
        },
        "firstName": {
          "description": "firstName",
          "type": "string",
          "example": "paolo"
        },
        "nickName": {
          "description": "nickName",
          "type": "string",
          "example": "gallocedrone"
        },
        "password": {
          "description": "password",
          "type": "string",
          "example": "supersecurepassword"
        },
        "secondName": {
          "description": "secondName",
          "type": "string",
          "example": "gallina"
        }
      }
    },
    "userDataFilter": {
      "description": "The porpouse of this object is to pass filtering data to the query",
      "type": "object",
      "properties": {
        "exclude": {
          "description": "include elements with these values",
          "$ref": "#/definitions/userDataNoPassword"
        },
        "include": {
          "description": "exclude elements with these values",
          "$ref": "#/definitions/userDataNoPassword"
        }
      }
    },
    "userDataList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/userDataNoPassword"
      }
    },
    "userDataNoPassword": {
      "description": "This object is a copy of userData without the password",
      "type": "object",
      "properties": {
        "country": {
          "description": "country",
          "type": "string",
          "example": "Italy"
        },
        "email": {
          "description": "email",
          "type": "string",
          "example": "paologallina@gmail.com"
        },
        "firstName": {
          "description": "firstName",
          "type": "string",
          "example": "paolo"
        },
        "nickName": {
          "description": "nickName",
          "type": "string",
          "example": "gallocedrone"
        },
        "secondName": {
          "description": "secondName",
          "type": "string",
          "example": "gallina"
        }
      }
    }
  }
}`))
}
